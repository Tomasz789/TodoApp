// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoApp.DAL.DataContext;

namespace ToDoList.WebApp.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20220717191239_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TodoLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(1700),
                            Description = "test list",
                            Title = "My list",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(1966),
                            UserId = new Guid("5f1a9b3a-90d6-4d68-a481-c63f2c2ea3ff")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(2488),
                            Description = "test list",
                            Title = "My list2",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(2502),
                            UserId = new Guid("5f1a9b3a-90d6-4d68-a481-c63f2c2ea3ff")
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(2532),
                            Description = "test list",
                            Title = "My list 3",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(2536),
                            UserId = new Guid("f94fd035-2bb5-4868-b005-e67ffb86972f")
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TaskListId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(5673),
                            EndDate = new DateTime(2022, 7, 17, 22, 12, 38, 732, DateTimeKind.Local).AddTicks(2966),
                            Status = 0,
                            TaskListId = 1,
                            Title = "Buy milk",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(5824)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(6253),
                            EndDate = new DateTime(2022, 7, 17, 22, 12, 38, 732, DateTimeKind.Local).AddTicks(6202),
                            Status = 0,
                            TaskListId = 2,
                            Title = "Buy coffee",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(6262)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(6296),
                            EndDate = new DateTime(2022, 7, 17, 22, 12, 38, 732, DateTimeKind.Local).AddTicks(6289),
                            Status = 0,
                            TaskListId = 1,
                            Title = "Do nothing",
                            Updated = new DateTime(2022, 7, 17, 21, 12, 38, 732, DateTimeKind.Local).AddTicks(6299)
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f1a9b3a-90d6-4d68-a481-c63f2c2ea3ff"),
                            Created = new DateTime(2022, 7, 17, 21, 12, 38, 727, DateTimeKind.Local).AddTicks(2123),
                            Email = "user1@gmail.com",
                            Password = "aaabb1C#",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 12, 38, 730, DateTimeKind.Local).AddTicks(7142),
                            UserName = "Firstuser1"
                        },
                        new
                        {
                            Id = new Guid("f94fd035-2bb5-4868-b005-e67ffb86972f"),
                            Created = new DateTime(2022, 7, 17, 21, 12, 38, 730, DateTimeKind.Local).AddTicks(8188),
                            Email = "userno2@wp.pl",
                            Password = "bbbAFF##C1",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 12, 38, 730, DateTimeKind.Local).AddTicks(8206),
                            UserName = "SecondUser22"
                        },
                        new
                        {
                            Id = new Guid("3b03920a-17ce-4106-83a1-b8146c476377"),
                            Created = new DateTime(2022, 7, 17, 21, 12, 38, 730, DateTimeKind.Local).AddTicks(8476),
                            Email = "testUser3@gmail.com",
                            Password = "test#PassworD!",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 12, 38, 730, DateTimeKind.Local).AddTicks(8480),
                            UserName = "thirdtestUser3"
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.HasOne("Todo.Domain.Entities.User", "User")
                        .WithMany("TodoLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoTask", b =>
                {
                    b.HasOne("Todo.Domain.Entities.TodoList", "TodoList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoList");
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Navigation("TodoLists");
                });
#pragma warning restore 612, 618
        }
    }
}
