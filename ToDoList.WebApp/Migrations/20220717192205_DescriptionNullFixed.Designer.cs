// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoApp.DAL.DataContext;

namespace ToDoList.WebApp.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20220717192205_DescriptionNullFixed")]
    partial class DescriptionNullFixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TodoLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(2912),
                            Description = "test list",
                            Title = "My list",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(3155),
                            UserId = new Guid("519c1198-1c6e-4ac1-99ee-ceaa9436494d")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(3649),
                            Description = "test list",
                            Title = "My list2",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(3664),
                            UserId = new Guid("519c1198-1c6e-4ac1-99ee-ceaa9436494d")
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(3692),
                            Description = "test list",
                            Title = "My list 3",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(3695),
                            UserId = new Guid("b51f6aff-3b1b-412e-a383-b97461a926b8")
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TaskListId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(6397),
                            Description = "test",
                            EndDate = new DateTime(2022, 7, 17, 22, 22, 4, 869, DateTimeKind.Local).AddTicks(3922),
                            Status = 0,
                            TaskListId = 1,
                            Title = "Buy milk",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(6548)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(6969),
                            Description = "test",
                            EndDate = new DateTime(2022, 7, 17, 22, 22, 4, 869, DateTimeKind.Local).AddTicks(6908),
                            Status = 0,
                            TaskListId = 2,
                            Title = "Buy coffee",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(6978)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(6997),
                            Description = "test",
                            EndDate = new DateTime(2022, 7, 17, 22, 22, 4, 869, DateTimeKind.Local).AddTicks(6990),
                            Status = 0,
                            TaskListId = 1,
                            Title = "Do nothing",
                            Updated = new DateTime(2022, 7, 17, 21, 22, 4, 869, DateTimeKind.Local).AddTicks(7000)
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("519c1198-1c6e-4ac1-99ee-ceaa9436494d"),
                            Created = new DateTime(2022, 7, 17, 21, 22, 4, 865, DateTimeKind.Local).AddTicks(1358),
                            Email = "user1@gmail.com",
                            Password = "aaabb1C#",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 22, 4, 867, DateTimeKind.Local).AddTicks(8862),
                            UserName = "Firstuser1"
                        },
                        new
                        {
                            Id = new Guid("b51f6aff-3b1b-412e-a383-b97461a926b8"),
                            Created = new DateTime(2022, 7, 17, 21, 22, 4, 867, DateTimeKind.Local).AddTicks(9848),
                            Email = "userno2@wp.pl",
                            Password = "bbbAFF##C1",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 22, 4, 867, DateTimeKind.Local).AddTicks(9885),
                            UserName = "SecondUser22"
                        },
                        new
                        {
                            Id = new Guid("a11767d4-6cd0-4a4b-9a0e-b8e66b773df7"),
                            Created = new DateTime(2022, 7, 17, 21, 22, 4, 868, DateTimeKind.Local).AddTicks(154),
                            Email = "testUser3@gmail.com",
                            Password = "test#PassworD!",
                            UpdatedAt = new DateTime(2022, 7, 17, 21, 22, 4, 868, DateTimeKind.Local).AddTicks(159),
                            UserName = "thirdtestUser3"
                        });
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.HasOne("Todo.Domain.Entities.User", "User")
                        .WithMany("TodoLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoTask", b =>
                {
                    b.HasOne("Todo.Domain.Entities.TodoList", "TodoList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoList");
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Navigation("TodoLists");
                });
#pragma warning restore 612, 618
        }
    }
}
